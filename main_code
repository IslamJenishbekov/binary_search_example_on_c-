//C++
//04.11.2022
#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <ctime>
#include <string>
using namespace std;

string binarySearch(vector <int> lstValues, int numForSearch) {
	sort(lstValues.begin(), lstValues.end()); //sorting our vector
	
	if (numForSearch<lstValues[0]){ //checking that the num for search generally lies in that interval 
		return "NO";
	}
	else if (numForSearch>lstValues[lstValues.size()-1]){
		return "NO";
	}
	
	int leftBorder, rightBorder; //borders of search
	int indexSearchElement;
	int counter=1; // analog of logarithm in this code
	rightBorder = lstValues.size(); // at first our right border = length of our vector
	leftBorder = 0; //left border = 0

	
	for (int i=1; counter<=lstValues.size(); i++){
		indexSearchElement = (rightBorder+leftBorder)/2; //index for search element is equal average of sum their borders 
		if (numForSearch==lstValues[indexSearchElement]){
			return "YES";
		}
		
		else if (numForSearch>lstValues[indexSearchElement]){
			leftBorder = indexSearchElement;
		}
		
		else if (numForSearch<lstValues[indexSearchElement]){
			rightBorder = indexSearchElement;
		}
		counter *= 2; // analog of logarithm;
	}
	return "NO";
}

int main() { //here is written a simple example of looking for a age of student
	vector <int> lstAgesStudents(1000);
	int ageStudent;
	
	srand(time(NULL)); //here you can put to vector whatever you want
	for (int i=0; i<1000; i++){
		ageStudent = rand()%1000;
		lstAgesStudents[i] = ageStudent;
	}
	
	int searchableAge;
	cout << "Input age for search: ";
	cin >> searchableAge;
	
	
	string condition;
	condition = binarySearch(lstAgesStudents, searchableAge);
	cout  << condition;
	
	return 0;
}
